// ##############################################################
// Create a Ray

// Get the fragment's position in screen space
vec2 screenPos = gl_FragCoord.xy;

// Convert the screen space position to normalized device coordinates (NDC)
vec2 ndcPos = (screenPos / u_ViewportSize) * 2.0 - 1.0;

// Create a 4D clip space position
vec4 clipPos = vec4(ndcPos, -1.0, 1.0);

// Combine the projection matrix and view matrix
mat4 projViewMatrix = u_ProjectionMatrix * u_ViewMatrix;

// Invert the combined matrix
mat4 inverseProjViewMatrix = inverse(projViewMatrix);

// Transform the clip space position to world space
vec4 worldPos = inverseProjViewMatrix * clipPos;
worldPos /= worldPos.w;

// Calculate the ray direction by subtracting the camera position from the world position
vec3 rayDirection = worldPos.xyz - cameraPosition;  // Replace 'cameraPosition' with your camera's position

// Normalize the ray direction
rayDirection = normalize(rayDirection);


// ##############################################################
    // https://www.cyanilux.com/tutorials/rain-effects-breakdown/
    // // Returns a random 2D vector
    // float2 voronoi_randomVector (float2 UV, float offset) {
    //     float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
    //     UV = frac(sin(mul(UV, m)) * 46839.32);
    //     return float2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);
    // }


https://godotshaders.com/snippet/fractal-brownian-motion-fbm/
https://godotshaders.com/snippet/seamless-perlin-noise/
https://godotshaders.com/snippet/polygons/
https://godotshaders.com/snippet/squares/
https://godotshaders.com/snippet/swirl/

https://godotshaders.com/shader/sokpop-skybox/
https://godotshaders.com/shader/stylized-sky-with-procedural-sun-and-moon/
https://godotshaders.com/shader/panoramic-textured-sky-with-clouds/
https://godotshaders.com/shader/stylized-sky-shader-with-clouds/
https://godotshaders.com/shader/stylized-sky-with-procedural-sun-and-moon/

https://godotshaders.com/shader/moving-gradient-noise-fog-mist-for-godot-4/

https://godotshaders.com/snippet/polar-coordinates/
vec2 polar_coordinates(vec2 uv, vec2 center, float zoom, float repeat)
{
	vec2 dir = uv - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) * 1.0/(3.1416 * 2.0);
	return mod(vec2(radius * zoom, angle * repeat), 1.0);
}

void fragment(){
	vec2 polar_uv = polar_coordinates(UV.xy, vec2(0.5), 0.3, 1.0);
	COLOR = texture(TEXTURE, polar_uv);
}

// https://www.shadertoy.com/view/dsGBzW
mat3 TBN(vec3 N) {
    //Returns the simple tangent space matrix
    vec3 Nb,Nt;
    if (abs(N.y)>0.999) {
        Nb = vec3(1.,0.,0.);
        Nt = vec3(0.,0.,1.);
    } else {
    	Nb = normalize(cross(N,vec3(0.,1.,0.)));
    	Nt = normalize(cross(Nb,N));
    }
    return mat3(Nb.x,Nt.x,N.x,Nb.y,Nt.y,N.y,Nb.z,Nt.z,N.z);
}

vec3 TBN(vec3 N, out vec3 O) {
    //Returns the simple tangent space directions
    if (abs(N.y)>0.999) {
        O = vec3(1.,0.,0.);
        return vec3(0.,0.,1.);
    } else {
        O = normalize(cross(N,vec3(0.,1.,0.)));
        return normalize(cross(O,N));
    }
}