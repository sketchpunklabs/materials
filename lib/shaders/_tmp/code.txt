// Get orthonormal basis from surface normal
// https://graphics.pixar.com/library/OrthonormalB/paper.pdf
void pixarONB(vec3 n, out vec3 b1, out vec3 b2){
	float sign_ = sign(n.z);
	float a = -1.0 / (sign_ + n.z);
	float b = n.x * n.y * a;
	b1 = vec3(1.0 + sign_ * n.x * n.x * a, sign_ * b, -sign_ * n.x);
	b2 = vec3(b, sign_ + n.y * n.y * a, -n.y);
}

// Return the normal after applying a normal map
vec3 getDetailNormal(vec3 p, vec3 normal){

    vec3 tangent;
    vec3 bitangent;
    
    // Construct orthogonal directions tangent and bitangent to sample detail gradient in
    pixarONB(normal, tangent, bitangent);
    
    tangent = normalize(tangent);
    bitangent = normalize(bitangent);

    vec3 delTangent = vec3(0);
    vec3 delBitangent = vec3(0);
    
    for(int i = ZERO; i < 2; i++){
        
        //i to  s
        //0 ->  1
        //1 -> -1
        float s = 1.0 - 2.0 * float(i&1);
    
        delTangent += s * getDetailExtrusion(p + s * tangent * DETAIL_EPSILON, normal);
        delBitangent += s * getDetailExtrusion(p + s * bitangent * DETAIL_EPSILON, normal);

    }
    
    return normalize(cross(delTangent, delBitangent));
}


// https://tinyurl.com/y5ebd7w7
vec3 getTriplanar(vec3 position, vec3 normal){

    // A hack to get the flow direction on the arms to be consistent
    vec2 xpos = position.zx;
    if(abs(position.z) > 0.65){
        // If position is below 0.0, flip the uv direction for upwards flow
        xpos = mix(xpos, vec2(position.z, -position.x), smoothstep(-0.0, -0.2, position.y));
    }

    vec3 xaxis = vec3(getDistortedTexture(DETAIL_SCALE.x*(position.zy)));
    vec3 yaxis = vec3(getDistortedTexture(DETAIL_SCALE.y*(xpos)));
    vec3 zaxis = vec3(getDistortedTexture(DETAIL_SCALE.z*(position.xy)));
   
    vec3 blending = abs(normal);
	blending = normalize(max(blending, 0.00001));
    blending = pow(blending, BLENDING_SHARPNESS);
	float b = (blending.x + blending.y + blending.z);
	blending /= b;

    return	xaxis * blending.x + 
       		yaxis * blending.y + 
        	zaxis * blending.z;
}

// Fresnel-Schlick
vec3 fresnel(float cosTheta, vec3 F0){
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
} 

// Specular part of Cook-Torrance BRDF
vec3 BRDF(vec3 p, vec3 n, vec3 viewDir, vec3 lightDir, vec3 F0, float roughness){
    vec3 h = normalize(viewDir + lightDir);
    float NdotL = dot_c(lightDir, n);
    float NdotV = dot_c(viewDir, n);

    float cosTheta = dot_c(h, viewDir);
    float D = distribution(n, h, roughness);
    vec3 F = fresnel(cosTheta, F0);

    float G = smiths(NdotV, NdotL, roughness);
    
    vec3 specular =  D * F * G / max(0.0001, (4.0 * NdotV * NdotL));
    
    return specular;
}


// https://www.geertarien.com/blog/2017/07/30/breakdown-of-the-lookAt-function-in-OpenGL/
mat3 lookAt(vec3 camera, vec3 at, vec3 up){
  vec3 zaxis = normalize(at-camera);    
  vec3 xaxis = normalize(cross(zaxis, up));
  vec3 yaxis = cross(xaxis, zaxis);

  return mat3(xaxis, yaxis, -zaxis);
}

vec3 rotate(vec3 p, vec4 q){
  return 2.0 * cross(q.xyz, p * q.w + cross(q.xyz, p)) + p;
}
vec3 rotateX(vec3 p, float angle){
    return rotate(p, vec4(sin(angle/2.0), 0.0, 0.0, cos(angle/2.0)));
}
vec3 rotateY(vec3 p, float angle){
	return rotate(p, vec4(0.0, sin(angle/2.0), 0.0, cos(angle/2.0)));
}
vec3 rotateZ(vec3 p, float angle){
	return rotate(p, vec4(0.0, 0.0, sin(angle), cos(angle)));
}


// http://filmicworlds.com/blog/filmic-tonemapping-operators/
vec3 Uncharted2Tonemap(vec3 x)
{
  float A = 0.15;  // Shoulder Strength
  float B = 0.50;  // Linear Strength
  float C = 0.10;  // Linear Angle
  float D = 0.20;  // Toe Strength
  float E = 0.02;  // Toe Numerator
  float F = 0.30;  // Toe Denominator
  float W = 11.2;  // Linear White Point Value

  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
vec3 ACESFilm(vec3 x){
    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);
}

    //Gamma correction 1.0/2.2 = 0.4545...
    col = pow(col, vec3(0.4545));


 mat3 tbnMatrix( vec3 norm, vec3 nEye2Frag, vec2 uv ){
            // https://www.geeks3d.com/20130122/normal-mapping-without-precomputed-tangent-space-vectors/
            // http://www.thetenthplanet.de/archives/1180
            // Get edge vectors of the pixel triangle
            vec3	dp1		= dFdx( nEye2Frag ),
                    dp2		= dFdy( nEye2Frag );
            vec2	duv1	= dFdx( uv ),
                    duv2	= dFdy( uv );

            // Solve the linear system
            vec3 	dp2perp	= cross( dp2, norm ),
                    dp1perp	= cross( norm, dp1 ),
                    T		= dp2perp * duv1.x + dp1perp * duv2.x,
                    B		= dp2perp * duv1.y + dp1perp * duv2.y;

            // Construct a scale-invariant frame 
            float invmax	= inversesqrt( max( dot(T,T), dot(B,B) ) );
            mat3 tbn		= mat3( T * invmax, B * invmax, norm );

            return tbn;
        }

        // This simpler version seems to work just as good as the other
        // smoothNormal is the interpolated normal from the vertex shader without being normalized
        // https://irrlicht.sourceforge.io/forum/viewtopic.php?t=52284
        mat3 tbnMatrix2( vec3 smoothNormal, vec3 pos, vec2 uv ){
            vec3 denormTangent = dFdx( uv.y ) * dFdy( pos ) - dFdx( pos ) * dFdy( uv.y );
            vec3 tangent       = normalize( denormTangent - smoothNormal * dot( smoothNormal, denormTangent ) );
 
            vec3 norm          = normalize( smoothNormal );
            vec3 bitangent     = cross( norm, tangent );

            mat3 tbn		   = mat3( tangent, bitangent, norm );
            return tbn;
        }