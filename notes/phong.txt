
// Multiple Lights using Phong
vec3 diffuse = vec3(0);
vec3 specular = vec3(0);

for (int i = 0; i < NUM_LIGHTS; i++) {
    vec3 lightDirection = normalize(u_lightPositions[i] - v_position);
    diffuse += u_lightColors[i] * max(dot(lightDirection, v_normal), 0.0);
    vec3 reflectDirection = reflect(-lightDirection, v_normal);
    specular += u_lightColors[i] * pow(max(dot(reflectDirection, V), 0.0), u_shininess);
}

This example assumes you have an array of light positions, colors, and types, where types are 0 for point light and 1 for direction light.
It also takes in account ambient light which is a constant light that illuminates all objects in the scene equally and is added to the final color before output.

In the for loop, we check the type of the light and calculate the diffuse and specular components for each one. 
The diffuse component is calculated by taking the dot product of the light direction and the surface normal, and 
the specular component is calculated by taking the dot product of the half-vector (the average of the light direction 
and the view direction) and the surface normal raised to the power of the material shininess.
vec3 diffuse = vec3(0);
vec3 specular = vec3(0);
vec3 ambient = u_ambientLight * u_albedo;

for (int i = 0; i < NUM_LIGHTS; i++) {
    vec3 lightDirection;
    if (u_lightType[i] == 0) {
        lightDirection = normalize(u_lightPositions[i] - v_position);
    } else {
        lightDirection = -normalize(u_lightPositions[i]);
    }
    vec3 halfVector = normalize(lightDirection + V);

    float diffuseTerm = max(dot(lightDirection, v_normal), 0.0);
    diffuse += u_lightColors[i] * diffuseTerm;

    float specularTerm = pow(max(dot(halfVector, v_normal), 0.0), u_shininess);
    specular += u_lightColors[i] * specularTerm;
}

vec3 finalColor = (diffuse + specular) + ambient;