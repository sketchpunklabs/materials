/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @flow strict-local
 * @format
 * @oncall cubitor
 */

'use strict';

// #region IMPORTS
import type Material from 'Material';

/* $FlowIgnore[untyped-import] */
import THREE from 'three.r137';
// #endregion

export function boxBorderMaterial(
  faceColor: number = 0xe0e0e0,
  borderColor: number | null = null,
): Material {
  const mat: Material = new THREE.RawShaderMaterial({
    depthTest: true,
    transparent: true, // This is causing an
    alphaToCoverage: false,
    side: THREE.DoubleSide,

    uniforms: {
      borderSize: {type: 'float', value: 0.01},
      borderColor: {
        type: 'vec3',
        value: new THREE.Color(borderColor !== null ? borderColor : faceColor),
      },
      borderAlpha: {type: 'float', value: 1.0},
      faceColor: {type: 'vec3', value: new THREE.Color(faceColor)},
      faceAlpha: {type: 'float', value: 0.2},
    },

    extensions: {
      derivatives: true,
    },

    vertexShader: `#version 300 es
    in vec3 position;
    in vec3 normal;
    in vec2 uv;

    uniform mat4 modelMatrix;
    uniform mat4 viewMatrix;
    uniform mat4 projectionMatrix;

    flat out vec3 fragMaxLPos;
    flat out vec3 fragLNorm;
         out vec3 fragScaleLPos;

    vec3 decomposeScaleFromMat4( mat4 m ){
      return vec3(
        length( vec3( m[0][0], m[0][1], m[0][2] ) ),
        length( vec3( m[1][0], m[1][1], m[1][2] ) ),
        length( vec3( m[2][0], m[2][1], m[2][2] ) )
      );
    }

    void main(){
        vec4 wPos     = modelMatrix * vec4( position, 1.0 );  // World Space
        vec4 vPos     = viewMatrix * wPos;                    // View Space
        gl_Position   = projectionMatrix * vPos;

        // Scaled Localspace Position
        fragScaleLPos = position * decomposeScaleFromMat4( modelMatrix );

        // Non-Interpolated values
        fragMaxLPos   = abs( fragScaleLPos );
        fragLNorm     = abs( normal );
    }`,

    fragmentShader: `#version 300 es
    precision mediump float;

    uniform float borderSize;
    uniform vec3  borderColor;
    uniform float borderAlpha;
    uniform vec3  faceColor;
    uniform float faceAlpha;

    flat in vec3 fragMaxLPos;
    flat in vec3 fragLNorm;
         in vec3 fragScaleLPos;

    out vec4 outColor;

    void main(){
      vec3 absPos = abs( fragScaleLPos );  // Absolute Scaled Position to handle negative axes
      vec3 px     = fwidth( absPos );      // Pixel Difference

      // Use normal to filter out specific axis, ex: Front face, its normal is [0,0,1]
      // We only need XY to draw border, so adding normal makes sure Z get a higher value by
      // adding 1 to its results value while adding 0 to the others. Using the MIN function will
      // end up selecting either X or Y since it'll have the smallest value & filter out Z.

      vec3 vMask = fragLNorm + smoothstep( fragMaxLPos - borderSize, fragMaxLPos - borderSize - px, absPos );
      float mask = 1.0 - min( min( vMask.x, vMask.y ), vMask.z );

      outColor   = mix( vec4( faceColor, faceAlpha ), vec4( borderColor, borderAlpha ), mask );
    }`,
  });

  // eslint-disable-next-line accessor-pairs
  Object.defineProperty(mat, 'color', {
    set(cNum: number) {
      const col = new THREE.Color(cNum);
      mat.uniforms.borderColor.value = col;
      mat.uniforms.faceColor.value = col;
    },
  });

  // eslint-disable-next-line accessor-pairs
  Object.defineProperty(mat, 'borderSize', {
    set(v: number) {
      mat.uniforms.borderSize.value = v;
    },
  });

  return mat;
}
